rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is a representative of a specific club
    function isRepresentative(clubId) {
      return get(/databases/$(database)/documents/clubs/$(clubId)).data.representativeId == request.auth.uid;
    }

    // Users can read their own data, admins can read any.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId || isAdmin();
    }
    
    // Clubs can be read by any authenticated user, but only created/updated by admins or the assigned representative.
    match /clubs/{clubId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Anyone can register a club
      allow update, delete: if isAdmin() || isRepresentative(clubId);
    }

    // Expenses can be created by any authenticated user.
    // They can only be read/updated by the submitter, the club rep, or an admin.
    match /expenses/{expenseId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth.uid == resource.data.submitterId || 
                              isRepresentative(resource.data.clubId) || 
                              isAdmin();
      allow delete: if isAdmin();
    }

    // Representative requests can be created by any authenticated user.
    // They can only be read/updated by the user who made the request or an admin.
    match /representativeRequests/{requestId} {
       allow create: if request.auth != null;
       allow read, update, delete: if request.auth.uid == resource.data.userId || isAdmin();
    }
  }
}
