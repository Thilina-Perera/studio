rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isExistingUser(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }
    
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isUserAdmin(userId) {
      return isUserAuthenticated() && isExistingUser(userId) && getUserRole(userId) == 'admin';
    }

    function isUserRepresentative(userId) {
      return isUserAuthenticated() && isExistingUser(userId) && (
        getUserRole(userId) == 'representative' || isUserAdmin(userId)
      );
    }
    
    // USERS
    match /users/{userId} {
      // Any authenticated user can read user data (needed for names, etc.)
      allow read: if isUserAuthenticated();
      // Only the user themselves or an admin can update their own data
      allow write: if isUserAuthenticated() && (request.auth.uid == userId || isUserAdmin(request.auth.uid));
      // Only admins can create or delete users through the console/backend
      allow create, delete: if isUserAdmin(request.auth.uid);
    }

    // CLUBS
    match /clubs/{clubId} {
        // Any authenticated user can read club data
        allow read: if isUserAuthenticated();
        // Only a representative or admin can create or update a club
        allow create, update: if isUserRepresentative(request.auth.uid);
        // Only admins can delete clubs
        allow delete: if isUserAdmin(request.auth.uid);
    }

    // EXPENSES
    match /expenses/{expenseId} {
        // - An admin can read any expense
        // - A representative can read expenses for their clubs
        // - A student can read their own submitted expenses
        allow read: if 
            isUserAuthenticated() && (
                isUserAdmin(request.auth.uid) ||
                (isUserRepresentative(request.auth.uid) && get(/databases/$(database)/documents/clubs/$(resource.data.clubId)).data.representativeId == request.auth.uid) ||
                resource.data.submitterId == request.auth.uid
            );

        // Any authenticated user can create an expense
        allow create: if isUserAuthenticated();

        // - An admin can update any expense
        // - A representative can update expenses for their clubs
        // - A student can update their own expense only if status is 'Pending'
        allow update: if 
            isUserAuthenticated() && (
                isUserAdmin(request.auth.uid) ||
                (isUserRepresentative(request.auth.uid) && get(/databases/$(database)/documents/clubs/$(resource.data.clubId)).data.representativeId == request.auth.uid) ||
                (resource.data.submitterId == request.auth.uid && resource.data.status == 'Pending')
            );
        
        // Only admins can delete expenses
        allow delete: if isUserAdmin(request.auth.uid);
    }
    
    // REPRESENTATIVE REQUESTS
    match /representativeRequests/{requestId} {
        // Users can create their own requests
        allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
        // Admins can read/write any request
        allow read, write: if isUserAdmin(request.auth.uid);
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
        // Users can read and delete their own notifications
        allow read, delete: if isUserAuthenticated() && resource.data.userId == request.auth.uid;
        // Admins can create notifications
        allow create: if isUserAdmin(request.auth.uid);
    }
  }
}