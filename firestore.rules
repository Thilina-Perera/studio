
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isClubRepresentative(clubId) {
      return get(/databases/$(database)/documents/clubs/$(clubId)).data.representativeId == request.auth.uid;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if !isSignedIn(); // Allow user creation on signup
      allow update: if request.auth.uid == userId; // Allow users to update their own profile
    }

    // Clubs collection
    match /clubs/{clubId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn(); // Any signed-in user can create a club (and becomes rep)
      allow update: if isClubRepresentative(clubId) || isRole('admin');
    }

    // Expenses collection
    match /expenses/{expenseId} {
      allow read: if isSignedIn(); // Further client-side filtering needed
      allow create: if isSignedIn();
      allow update: if isClubRepresentative(resource.data.clubId) || isRole('admin');
    }

    // Representative Requests collection
    match /representativeRequests/{requestId} {
      allow read: if isRole('admin');
      allow create: if isSignedIn();
      allow update: if isRole('admin');
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.userId; // Can only read/update own notifications
      allow create: if isRole('admin') || request.resource.data.userId == request.auth.uid;
    }
  }
}
