
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions to check user roles
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isRepresentative(clubId) {
      return isAuthenticated() && get(/databases/$(database)/documents/clubs/$(clubId)).data.representativeId == request.auth.uid;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone authenticated can read user data (needed for names, etc.)
      // Only the user themselves or an admin can update their own profile
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
    }

    // Rules for the 'clubs' collection
    match /clubs/{clubId} {
      // Anyone authenticated can read club data
      // Only an admin or a representative of that club can update it. Anyone can create.
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAdmin() || isRepresentative(clubId);
      allow delete: if isAdmin();
    }

    // Rules for the 'expenses' collection
    match /expenses/{expenseId} {
      allow read: if isAdmin() || isRepresentative(request.resource.data.clubId) || isOwner(request.resource.data.submitterId);
      allow create: if isAuthenticated();
      allow update: if isAdmin() || isRepresentative(request.resource.data.clubId) || isOwner(request.resource.data.submitterId);
      allow delete: if isAdmin();
    }
    
    // Rules for 'representativeRequests'
    match /representativeRequests/{requestId} {
       allow read: if isAuthenticated();
       allow create: if isAuthenticated();
       allow update, delete: if isAdmin();
    }
  }
}
