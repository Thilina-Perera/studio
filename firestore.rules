
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get the requesting user's role from the users collection
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    // Helper function to check if user is an admin
    function isAdmin() {
      return getRole(request.auth.uid) == 'admin';
    }

    // Helper function to check if a user is a representative of a specific club
    function isRepresentative(clubId) {
      return get(/databases/$(database)/documents/clubs/$(clubId)).data.representativeId == request.auth.uid;
    }
    
    // Users can read other user profiles (for names, etc.) but only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Clubs can be read by any authenticated user.
    // New clubs can be created by authenticated users.
    // Only admins or the designated representative can update a club.
    match /clubs/{clubId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isAdmin() || isRepresentative(clubId));
      allow delete: if false; // Disallow deletion for data integrity
    }

    // Expenses can be created by any authenticated user.
    // They can only be read/updated by their submitter, the club rep, or an admin.
    match /expenses/{expenseId} {
      allow create: if isAuthenticated();
      allow read, update: if isAuthenticated() && 
                           (request.auth.uid == resource.data.submitterId ||
                            isAdmin() || 
                            isRepresentative(resource.data.clubId));
      allow delete: if isAdmin();
    }
    
    // Requests to become a representative can be created by any authenticated user.
    // They can be read by the user who made the request or an admin.
    // Only an admin can approve or reject (update) the request.
    match /representativeRequests/{requestId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
      allow update, delete: if isAdmin();
    }
  }
}
